// Code generated by goyacc - DO NOT EDIT.

package parse

import __yyfmt__ "fmt"

import (
	"github.com/notnoobmaster/luautil/ast"
)

type yySymType struct {
	yys   int
	token ast.Token

	stmts []ast.Stmt
	stmt  ast.Stmt

	funcname *ast.FuncName
	funcexpr *ast.FunctionExpr

	exprlist []ast.Expr
	expr     ast.Expr

	fieldlist []*ast.Field
	field     *ast.Field
	fieldsep  string

	namelist []string
	parlist  *ast.ParList
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57384
	yyEofCode = 57344
	T2Colon   = 57378
	T2Comma   = 57376
	T3Comma   = 57377
	TAnd      = 57346
	TBreak    = 57347
	TCompound = 57382
	TContinue = 57348
	TDo       = 57349
	TElse     = 57350
	TElseIf   = 57351
	TEnd      = 57352
	TEqeq     = 57369
	TFalse    = 57353
	TFloorDiv = 57373
	TFor      = 57354
	TFunction = 57355
	TGoto     = 57368
	TGte      = 57372
	TIdent    = 57379
	TIf       = 57356
	TIn       = 57357
	TLocal    = 57358
	TLshift   = 57375
	TLte      = 57371
	TNeq      = 57370
	TNil      = 57359
	TNot      = 57360
	TNumber   = 57380
	TOr       = 57361
	TRepeat   = 57363
	TReturn   = 57362
	TRshift   = 57374
	TString   = 57381
	TThen     = 57364
	TTrue     = 57365
	TUntil    = 57366
	TWhile    = 57367
	UNARY     = 57383
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -106
)

var (
	yyPrec = map[int]int{
		TOr:       0,
		TAnd:      1,
		'|':       2,
		'~':       3,
		'&':       4,
		'>':       5,
		'<':       5,
		TGte:      5,
		TLte:      5,
		TEqeq:     5,
		TNeq:      5,
		TRshift:   6,
		TLshift:   6,
		T2Comma:   7,
		'+':       8,
		'-':       8,
		'*':       9,
		'/':       9,
		'%':       9,
		TFloorDiv: 9,
		UNARY:     10,
		'^':       11,
	}

	yyXLAT = map[int]int{
		57379: 0,  // TIdent (154x)
		40:    1,  // '(' (153x)
		57355: 2,  // TFunction (141x)
		45:    3,  // '-' (119x)
		126:   4,  // '~' (119x)
		57352: 5,  // TEnd (107x)
		59:    6,  // ';' (106x)
		57349: 7,  // TDo (96x)
		57378: 8,  // T2Colon (93x)
		57347: 9,  // TBreak (92x)
		57348: 10, // TContinue (92x)
		57354: 11, // TFor (92x)
		57368: 12, // TGoto (92x)
		57356: 13, // TIf (92x)
		57358: 14, // TLocal (92x)
		57363: 15, // TRepeat (92x)
		57362: 16, // TReturn (92x)
		57367: 17, // TWhile (92x)
		57350: 18, // TElse (91x)
		57351: 19, // TElseIf (91x)
		57366: 20, // TUntil (88x)
		57344: 21, // $end (87x)
		44:    22, // ',' (83x)
		123:   23, // '{' (73x)
		57381: 24, // TString (73x)
		37:    25, // '%' (71x)
		38:    26, // '&' (71x)
		42:    27, // '*' (71x)
		43:    28, // '+' (71x)
		47:    29, // '/' (71x)
		60:    30, // '<' (71x)
		62:    31, // '>' (71x)
		94:    32, // '^' (71x)
		124:   33, // '|' (71x)
		57376: 34, // T2Comma (71x)
		57346: 35, // TAnd (71x)
		57369: 36, // TEqeq (71x)
		57373: 37, // TFloorDiv (71x)
		57372: 38, // TGte (71x)
		57375: 39, // TLshift (71x)
		57371: 40, // TLte (71x)
		57370: 41, // TNeq (71x)
		57361: 42, // TOr (71x)
		57374: 43, // TRshift (71x)
		41:    44, // ')' (67x)
		125:   45, // '}' (65x)
		93:    46, // ']' (56x)
		57364: 47, // TThen (56x)
		57406: 48, // string (50x)
		57377: 49, // T3Comma (50x)
		57407: 50, // tableconstructor (50x)
		35:    51, // '#' (48x)
		57385: 52, // afunctioncall (48x)
		57400: 53, // functioncall (48x)
		57404: 54, // prefixexp (48x)
		57353: 55, // TFalse (48x)
		57359: 56, // TNil (48x)
		57360: 57, // TNot (48x)
		57380: 58, // TNumber (48x)
		57365: 59, // TTrue (48x)
		57408: 60, // var (48x)
		57391: 61, // expr (46x)
		57399: 62, // function (46x)
		91:    63, // '[' (28x)
		46:    64, // '.' (27x)
		58:    65, // ':' (27x)
		61:    66, // '=' (12x)
		57388: 67, // chunk (12x)
		57389: 68, // chunk1 (12x)
		57387: 69, // block (11x)
		57392: 70, // exprlist (6x)
		57382: 71, // TCompound (6x)
		57386: 72, // args (4x)
		57396: 73, // funcbody (3x)
		57402: 74, // namelist (3x)
		57357: 75, // TIn (3x)
		57393: 76, // field (2x)
		57390: 77, // elseifs (1x)
		57394: 78, // fieldlist (1x)
		57395: 79, // fieldsep (1x)
		57397: 80, // funcname (1x)
		57398: 81, // funcname1 (1x)
		57401: 82, // laststat (1x)
		57403: 83, // parlist (1x)
		57405: 84, // stat (1x)
		57409: 85, // varlist (1x)
		57384: 86, // $default (0x)
		57345: 87, // error (0x)
		57383: 88, // UNARY (0x)
	}

	yySymNames = []string{
		"TIdent",
		"'('",
		"TFunction",
		"'-'",
		"'~'",
		"TEnd",
		"';'",
		"TDo",
		"T2Colon",
		"TBreak",
		"TContinue",
		"TFor",
		"TGoto",
		"TIf",
		"TLocal",
		"TRepeat",
		"TReturn",
		"TWhile",
		"TElse",
		"TElseIf",
		"TUntil",
		"$end",
		"','",
		"'{'",
		"TString",
		"'%'",
		"'&'",
		"'*'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'^'",
		"'|'",
		"T2Comma",
		"TAnd",
		"TEqeq",
		"TFloorDiv",
		"TGte",
		"TLshift",
		"TLte",
		"TNeq",
		"TOr",
		"TRshift",
		"')'",
		"'}'",
		"']'",
		"TThen",
		"string",
		"T3Comma",
		"tableconstructor",
		"'#'",
		"afunctioncall",
		"functioncall",
		"prefixexp",
		"TFalse",
		"TNil",
		"TNot",
		"TNumber",
		"TTrue",
		"var",
		"expr",
		"function",
		"'['",
		"'.'",
		"':'",
		"'='",
		"chunk",
		"chunk1",
		"block",
		"exprlist",
		"TCompound",
		"args",
		"funcbody",
		"namelist",
		"TIn",
		"field",
		"elseifs",
		"fieldlist",
		"fieldsep",
		"funcname",
		"funcname1",
		"laststat",
		"parlist",
		"stat",
		"varlist",
		"$default",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {67, 1},
		2:   {67, 2},
		3:   {67, 3},
		4:   {68, 0},
		5:   {68, 2},
		6:   {68, 2},
		7:   {69, 1},
		8:   {84, 3},
		9:   {84, 3},
		10:  {84, 1},
		11:  {84, 3},
		12:  {84, 5},
		13:  {84, 4},
		14:  {84, 6},
		15:  {84, 8},
		16:  {84, 9},
		17:  {84, 11},
		18:  {84, 7},
		19:  {84, 3},
		20:  {84, 4},
		21:  {84, 4},
		22:  {84, 2},
		23:  {84, 3},
		24:  {84, 2},
		25:  {84, 1},
		26:  {77, 0},
		27:  {77, 5},
		28:  {82, 1},
		29:  {82, 2},
		30:  {82, 1},
		31:  {80, 1},
		32:  {80, 3},
		33:  {81, 1},
		34:  {81, 3},
		35:  {85, 1},
		36:  {85, 3},
		37:  {60, 1},
		38:  {60, 4},
		39:  {60, 3},
		40:  {74, 1},
		41:  {74, 3},
		42:  {70, 1},
		43:  {70, 3},
		44:  {61, 1},
		45:  {61, 1},
		46:  {61, 1},
		47:  {61, 1},
		48:  {61, 1},
		49:  {61, 1},
		50:  {61, 1},
		51:  {61, 1},
		52:  {61, 1},
		53:  {61, 3},
		54:  {61, 3},
		55:  {61, 3},
		56:  {61, 3},
		57:  {61, 3},
		58:  {61, 3},
		59:  {61, 3},
		60:  {61, 3},
		61:  {61, 3},
		62:  {61, 3},
		63:  {61, 3},
		64:  {61, 3},
		65:  {61, 3},
		66:  {61, 3},
		67:  {61, 3},
		68:  {61, 3},
		69:  {61, 3},
		70:  {61, 3},
		71:  {61, 3},
		72:  {61, 3},
		73:  {61, 3},
		74:  {61, 2},
		75:  {61, 2},
		76:  {61, 2},
		77:  {61, 2},
		78:  {48, 1},
		79:  {54, 1},
		80:  {54, 1},
		81:  {54, 1},
		82:  {54, 3},
		83:  {52, 3},
		84:  {53, 2},
		85:  {53, 4},
		86:  {72, 2},
		87:  {72, 3},
		88:  {72, 1},
		89:  {72, 1},
		90:  {62, 2},
		91:  {73, 5},
		92:  {73, 4},
		93:  {83, 1},
		94:  {83, 1},
		95:  {83, 3},
		96:  {50, 2},
		97:  {50, 3},
		98:  {78, 1},
		99:  {78, 3},
		100: {78, 2},
		101: {76, 3},
		102: {76, 5},
		103: {76, 1},
		104: {79, 1},
		105: {79, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [210][]uint16{
		// 0
		{102, 102, 102, 6: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 21: 102, 67: 107, 108},
		{21: 106},
		{127, 130, 119, 5: 105, 111, 114, 121, 123, 125, 118, 122, 117, 120, 116, 124, 115, 105, 105, 105, 105, 52: 128, 129, 113, 60: 126, 82: 109, 84: 110, 112},
		{5: 104, 315, 18: 104, 104, 104, 104},
		{101, 101, 101, 5: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		// 5
		{100, 100, 100, 5: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{22: 310, 66: 308, 71: 309},
		{96, 235, 96, 5: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 23: 149, 145, 48: 237, 50: 236, 63: 231, 232, 234, 72: 233},
		{102, 102, 102, 5: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 216, 108, 306},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 302, 137},
		// 10
		{102, 102, 102, 6: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 20: 102, 67: 216, 108, 299},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 287, 137},
		{268, 74: 269},
		{262, 80: 260, 261},
		{211, 2: 253, 74: 254},
		// 15
		{251},
		{250},
		{81, 81, 81, 5: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{127, 130, 148, 141, 144, 78, 78, 18: 78, 78, 78, 78, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 238, 137, 70: 249},
		{5: 76, 76, 18: 76, 76, 76, 76},
		// 20
		{27, 27, 27, 5: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 71, 27, 27, 63: 27, 27, 27, 71, 71: 71},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 63: 69, 69, 69, 69, 71: 69},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 63: 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 63: 25, 25, 25},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 147, 131, 133, 132, 142, 135, 134, 146, 140, 137},
		// 25
		{56, 235, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 149, 145, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 237, 50: 236, 63: 231, 232, 234, 72: 233},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 25: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 25: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 25: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 25: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		// 30
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 25: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 25: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 25: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 25: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{3: 172, 159, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168, 230},
		// 35
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 229, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 228, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 227, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 226, 137},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 63: 28, 28, 28},
		// 40
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 63: 27, 27, 27},
		{1: 25, 3: 25, 25, 23: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 225, 63: 25, 25, 25},
		{1: 210, 73: 209},
		{150, 130, 148, 141, 144, 23: 149, 145, 45: 152, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 151, 137, 155, 76: 154, 78: 153},
		{1: 69, 3: 69, 69, 6: 69, 22: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 45: 69, 63: 69, 69, 69, 207},
		// 45
		{3: 172, 159, 6: 3, 22: 3, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168, 45: 3},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 63: 10, 10, 10},
		{6: 205, 22: 204, 45: 202, 79: 203},
		{6: 8, 22: 8, 45: 8},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 156, 137},
		// 50
		{3: 172, 159, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168, 46: 178},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 201, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 200, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 199, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 198, 137},
		// 55
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 197, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 196, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 195, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 194, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 193, 137},
		// 60
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 192, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 191, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 190, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 189, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 188, 137},
		// 65
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 187, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 186, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 185, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 184, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 183, 137},
		// 70
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 182, 137},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 181, 137},
		{66: 179},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 180, 137},
		{3: 172, 159, 6: 4, 22: 4, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168, 45: 4},
		// 75
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 25: 33, 33, 33, 33, 33, 33, 33, 177, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 25: 34, 34, 34, 34, 34, 34, 34, 177, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 25: 35, 35, 35, 35, 35, 35, 35, 177, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 25: 36, 36, 36, 36, 36, 36, 36, 177, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 25: 37, 37, 37, 37, 37, 37, 37, 177, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 80
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 25: 176, 38, 173, 38, 174, 38, 38, 177, 38, 38, 38, 38, 175, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 25: 176, 39, 173, 39, 174, 39, 39, 177, 39, 39, 39, 39, 175, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{40, 40, 40, 172, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 25: 176, 40, 173, 171, 174, 40, 40, 177, 40, 170, 40, 40, 175, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{41, 41, 41, 172, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 25: 176, 41, 173, 171, 174, 41, 41, 177, 41, 170, 41, 41, 175, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{42, 42, 42, 172, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 25: 176, 42, 173, 171, 174, 42, 42, 177, 42, 170, 42, 42, 175, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		// 85
		{43, 43, 43, 172, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 25: 176, 43, 173, 171, 174, 43, 43, 177, 43, 170, 43, 43, 175, 43, 169, 43, 43, 43, 168, 43, 43, 43, 43},
		{44, 44, 44, 172, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 25: 176, 44, 173, 171, 174, 44, 44, 177, 44, 170, 44, 44, 175, 44, 169, 44, 44, 44, 168, 44, 44, 44, 44},
		{45, 45, 45, 172, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 25: 176, 45, 173, 171, 174, 45, 45, 177, 45, 170, 45, 45, 175, 45, 169, 45, 45, 45, 168, 45, 45, 45, 45},
		{46, 46, 46, 172, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 25: 176, 46, 173, 171, 174, 46, 46, 177, 46, 170, 46, 46, 175, 46, 169, 46, 46, 46, 168, 46, 46, 46, 46},
		{47, 47, 47, 172, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 25: 176, 47, 173, 171, 174, 47, 47, 177, 47, 170, 47, 47, 175, 47, 169, 47, 47, 47, 168, 47, 47, 47, 47},
		// 90
		{48, 48, 48, 172, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 25: 176, 48, 173, 171, 174, 48, 48, 177, 48, 170, 48, 48, 175, 48, 169, 48, 48, 48, 168, 48, 48, 48, 48},
		{49, 49, 49, 172, 159, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 49, 166, 175, 164, 169, 165, 167, 49, 168, 49, 49, 49, 49},
		{50, 50, 50, 172, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 25: 176, 50, 173, 171, 174, 163, 162, 177, 50, 170, 50, 166, 175, 164, 169, 165, 167, 50, 168, 50, 50, 50, 50},
		{51, 51, 51, 172, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 25: 176, 160, 173, 171, 174, 163, 162, 177, 51, 170, 51, 166, 175, 164, 169, 165, 167, 51, 168, 51, 51, 51, 51},
		{52, 52, 52, 172, 159, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 25: 176, 160, 173, 171, 174, 163, 162, 177, 52, 170, 52, 166, 175, 164, 169, 165, 167, 52, 168, 52, 52, 52, 52},
		// 95
		{53, 53, 53, 172, 159, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 53, 168, 53, 53, 53, 53},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 63: 9, 9, 9},
		{150, 130, 148, 141, 144, 6: 6, 22: 6, 149, 145, 45: 6, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 151, 137, 155, 76: 206},
		{2, 2, 2, 2, 2, 6: 2, 22: 2, 2, 2, 45: 2, 49: 2, 51: 2, 55: 2, 2, 2, 2, 2, 63: 2},
		{1, 1, 1, 1, 1, 6: 1, 22: 1, 1, 1, 45: 1, 49: 1, 51: 1, 55: 1, 1, 1, 1, 1, 63: 1},
		// 100
		{6: 7, 22: 7, 45: 7},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 208, 137},
		{3: 172, 159, 6: 5, 22: 5, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168, 45: 5},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{211, 44: 214, 49: 215, 74: 212, 83: 213},
		// 105
		{66, 66, 66, 5: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 44: 66, 66: 66},
		{22: 222, 44: 12},
		{44: 219},
		{102, 102, 102, 5: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 216, 108, 217},
		{44: 13},
		// 110
		{5: 99, 18: 99, 99, 99},
		{5: 218},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 25: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{102, 102, 102, 5: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 216, 108, 220},
		{5: 221},
		// 115
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 25: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{223, 49: 224},
		{65, 65, 65, 5: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 44: 65, 66: 65, 75: 65},
		{44: 11},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 63: 23, 23, 23},
		// 120
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 25: 29, 29, 29, 29, 29, 29, 29, 177, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 25: 30, 30, 30, 30, 30, 30, 30, 177, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 25: 31, 31, 31, 31, 31, 31, 31, 177, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 25: 32, 32, 32, 32, 32, 32, 32, 177, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 63: 24, 24, 24},
		// 125
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 247, 137},
		{246},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 63: 22, 22, 22},
		{244},
		{127, 130, 148, 141, 144, 23: 149, 145, 44: 240, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 238, 137, 70: 239},
		// 130
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 63: 18, 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 63: 17, 17, 17},
		{64, 64, 64, 172, 159, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168, 64},
		{22: 241, 44: 242},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 63: 20, 20, 20},
		// 135
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 243, 137},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 63: 19, 19, 19},
		{63, 63, 63, 172, 159, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168, 63},
		{1: 235, 23: 149, 145, 48: 237, 50: 236, 72: 245},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 63: 21, 21, 21},
		// 140
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 63: 67, 67, 67, 67, 71: 67},
		{3: 172, 159, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168, 46: 248},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 63: 68, 68, 68, 68, 71: 68},
		{5: 77, 77, 18: 77, 77, 77, 77, 241},
		{82, 82, 82, 5: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		// 145
		{8: 252},
		{83, 83, 83, 5: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{258},
		{84, 84, 84, 5: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 256, 66: 255},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 238, 137, 70: 257},
		// 150
		{223},
		{85, 85, 85, 5: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 241},
		{1: 210, 73: 259},
		{86, 86, 86, 5: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{1: 210, 73: 267},
		// 155
		{1: 75, 64: 264, 263},
		{1: 73, 64: 73, 73},
		{266},
		{265},
		{1: 72, 64: 72, 72},
		// 160
		{1: 74},
		{87, 87, 87, 5: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{22: 66, 66: 275, 75: 66},
		{22: 256, 75: 270},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 238, 137, 70: 271},
		// 165
		{7: 272, 22: 241},
		{102, 102, 102, 5: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 216, 108, 273},
		{5: 274},
		{88, 88, 88, 5: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 276, 137},
		// 170
		{3: 172, 159, 22: 277, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 278, 137},
		{3: 172, 159, 7: 279, 22: 280, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168},
		{102, 102, 102, 5: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 216, 108, 285},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 281, 137},
		// 175
		{3: 172, 159, 7: 282, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168},
		{102, 102, 102, 5: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 216, 108, 283},
		{5: 284},
		{89, 89, 89, 5: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{5: 286},
		// 180
		{90, 90, 90, 5: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{3: 172, 159, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168, 47: 288},
		{102, 102, 102, 5: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 216, 108, 289},
		{5: 80, 18: 80, 80, 77: 290},
		{5: 291, 18: 292, 293},
		// 185
		{92, 92, 92, 5: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{102, 102, 102, 5: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 216, 108, 297},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 294, 137},
		{3: 172, 159, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168, 47: 295},
		{102, 102, 102, 5: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 216, 108, 296},
		// 190
		{5: 79, 18: 79, 79},
		{5: 298},
		{91, 91, 91, 5: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{20: 300},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 301, 137},
		// 195
		{93, 93, 93, 172, 159, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168},
		{3: 172, 159, 7: 303, 25: 176, 160, 173, 171, 174, 163, 162, 177, 158, 170, 161, 166, 175, 164, 169, 165, 167, 157, 168},
		{102, 102, 102, 5: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 216, 108, 304},
		{5: 305},
		{94, 94, 94, 5: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		// 200
		{5: 307},
		{95, 95, 95, 5: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 238, 137, 70: 314},
		{127, 130, 148, 141, 144, 23: 149, 145, 48: 138, 136, 139, 143, 128, 129, 131, 133, 132, 142, 135, 134, 146, 238, 137, 70: 313},
		{127, 130, 52: 128, 129, 312, 60: 311},
		// 205
		{1: 27, 22: 70, 27, 27, 63: 27, 27, 27, 70, 71: 70},
		{1: 235, 23: 149, 145, 48: 237, 50: 236, 63: 231, 232, 234, 72: 233},
		{97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 241},
		{98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 241},
		{5: 103, 18: 103, 103, 103, 103},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 87

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 2:
		{
			yyVAL.stmts = append(yyS[yypt-1].stmts, yyS[yypt-0].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 3:
		{
			yyVAL.stmts = append(yyS[yypt-2].stmts, yyS[yypt-1].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 4:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 5:
		{
			yyVAL.stmts = append(yyS[yypt-1].stmts, yyS[yypt-0].stmt)
		}
	case 6:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 7:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 8:
		{
			yyVAL.stmt = &ast.AssignStmt{Lhs: yyS[yypt-2].exprlist, Rhs: yyS[yypt-0].exprlist}
			yyVAL.stmt.SetLine(yyS[yypt-2].exprlist[0].Line())
		}
	case 9:
		{
			yyVAL.stmt = &ast.CompoundAssignStmt{Operator: yyS[yypt-1].token.Str, Lhs: yyS[yypt-2].exprlist, Rhs: yyS[yypt-0].exprlist}
			yyVAL.stmt.SetLine(yyS[yypt-2].exprlist[0].Line())
		}
	case 10:
		{
			if _, ok := yyS[yypt-0].expr.(*ast.FuncCallExpr); !ok {
				yylex.(*Lexer).Error("parse error")
			} else {
				yyVAL.stmt = &ast.FuncCallStmt{Expr: yyS[yypt-0].expr}
				yyVAL.stmt.SetLine(yyS[yypt-0].expr.Line())
			}
		}
	case 11:
		{
			yyVAL.stmt = &ast.DoBlockStmt{Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-2].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 12:
		{
			yyVAL.stmt = &ast.WhileStmt{Condition: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-4].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 13:
		{
			yyVAL.stmt = &ast.RepeatStmt{Condition: yyS[yypt-0].expr, Stmts: yyS[yypt-2].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-3].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].expr.Line())
		}
	case 14:
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyS[yypt-4].expr, Then: yyS[yypt-2].stmts}
			cur := yyVAL.stmt
			for _, elseif := range yyS[yypt-1].stmts {
				cur.(*ast.IfStmt).Else = []ast.Stmt{elseif}
				cur = elseif
			}
			yyVAL.stmt.SetLine(yyS[yypt-5].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 15:
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyS[yypt-6].expr, Then: yyS[yypt-4].stmts}
			cur := yyVAL.stmt
			for _, elseif := range yyS[yypt-3].stmts {
				cur.(*ast.IfStmt).Else = []ast.Stmt{elseif}
				cur = elseif
			}
			cur.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			yyVAL.stmt.SetLine(yyS[yypt-7].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 16:
		{
			yyVAL.stmt = &ast.NumberForStmt{Name: yyS[yypt-7].token.Str, Init: yyS[yypt-5].expr, Limit: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-8].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 17:
		{
			yyVAL.stmt = &ast.NumberForStmt{Name: yyS[yypt-9].token.Str, Init: yyS[yypt-7].expr, Limit: yyS[yypt-5].expr, Step: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-10].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 18:
		{
			yyVAL.stmt = &ast.GenericForStmt{Names: yyS[yypt-5].namelist, Exprs: yyS[yypt-3].exprlist, Stmts: yyS[yypt-1].stmts}
			yyVAL.stmt.SetLine(yyS[yypt-6].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 19:
		{
			yyVAL.stmt = &ast.FuncDefStmt{Name: yyS[yypt-1].funcname, Func: yyS[yypt-0].funcexpr}
			yyVAL.stmt.SetLine(yyS[yypt-2].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].funcexpr.LastLine())
		}
	case 20:
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: []string{yyS[yypt-1].token.Str}, Exprs: []ast.Expr{yyS[yypt-0].funcexpr}}
			yyVAL.stmt.SetLine(yyS[yypt-3].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyS[yypt-0].funcexpr.LastLine())
		}
	case 21:
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: yyS[yypt-2].namelist, Exprs: yyS[yypt-0].exprlist}
			yyVAL.stmt.SetLine(yyS[yypt-3].token.Pos.Line)
		}
	case 22:
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: yyS[yypt-0].namelist, Exprs: []ast.Expr{}}
			yyVAL.stmt.SetLine(yyS[yypt-1].token.Pos.Line)
		}
	case 23:
		{
			yyVAL.stmt = &ast.LabelStmt{Name: yyS[yypt-1].token.Str}
			yyVAL.stmt.SetLine(yyS[yypt-2].token.Pos.Line)
		}
	case 24:
		{
			yyVAL.stmt = &ast.GotoStmt{Label: yyS[yypt-0].token.Str}
			yyVAL.stmt.SetLine(yyS[yypt-1].token.Pos.Line)
		}
	case 25:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 26:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 27:
		{
			yyVAL.stmts = append(yyS[yypt-4].stmts, &ast.IfStmt{Condition: yyS[yypt-2].expr, Then: yyS[yypt-0].stmts})
			yyVAL.stmts[len(yyVAL.stmts)-1].SetLine(yyS[yypt-3].token.Pos.Line)
		}
	case 28:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: nil}
			yyVAL.stmt.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 29:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprlist}
			yyVAL.stmt.SetLine(yyS[yypt-1].token.Pos.Line)
		}
	case 30:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 31:
		{
			yyVAL.funcname = yyS[yypt-0].funcname
		}
	case 32:
		{
			yyVAL.funcname = &ast.FuncName{Func: nil, Receiver: yyS[yypt-2].funcname.Func, Method: yyS[yypt-0].token.Str}
		}
	case 33:
		{
			yyVAL.funcname = &ast.FuncName{Func: &ast.IdentExpr{Value: yyS[yypt-0].token.Str}}
			yyVAL.funcname.Func.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 34:
		{
			key := &ast.StringExpr{Value: yyS[yypt-0].token.Str}
			key.SetLine(yyS[yypt-0].token.Pos.Line)
			fn := &ast.AttrGetExpr{Object: yyS[yypt-2].funcname.Func, Key: key}
			fn.SetLine(yyS[yypt-0].token.Pos.Line)
			yyVAL.funcname = &ast.FuncName{Func: fn}
		}
	case 35:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 36:
		{
			yyVAL.exprlist = append(yyS[yypt-2].exprlist, yyS[yypt-0].expr)
		}
	case 37:
		{
			yyVAL.expr = &ast.IdentExpr{Value: yyS[yypt-0].token.Str}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 38:
		{
			yyVAL.expr = &ast.AttrGetExpr{Object: yyS[yypt-3].expr, Key: yyS[yypt-1].expr}
			yyVAL.expr.SetLine(yyS[yypt-3].expr.Line())
		}
	case 39:
		{
			key := &ast.StringExpr{Value: yyS[yypt-0].token.Str}
			key.SetLine(yyS[yypt-0].token.Pos.Line)
			yyVAL.expr = &ast.AttrGetExpr{Object: yyS[yypt-2].expr, Key: key}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 40:
		{
			yyVAL.namelist = []string{yyS[yypt-0].token.Str}
		}
	case 41:
		{
			yyVAL.namelist = append(yyS[yypt-2].namelist, yyS[yypt-0].token.Str)
		}
	case 42:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.exprlist = append(yyS[yypt-2].exprlist, yyS[yypt-0].expr)
		}
	case 44:
		{
			yyVAL.expr = &ast.NilExpr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 45:
		{
			yyVAL.expr = &ast.FalseExpr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 46:
		{
			yyVAL.expr = &ast.TrueExpr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 47:
		{
			yyVAL.expr = &ast.NumberExpr{Value: yyS[yypt-0].token.Num}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 48:
		{
			yyVAL.expr = &ast.Comma3Expr{}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 49:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 50:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 51:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 52:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 53:
		{
			yyVAL.expr = &ast.LogicalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "or", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 54:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "|", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 55:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "~", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 56:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 57:
		{
			yyVAL.expr = &ast.LogicalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "and", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 58:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 59:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 60:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 61:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 62:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 63:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "~=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 64:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">>", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 65:
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 66:
		{
			yyVAL.expr = &ast.StringConcatOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 67:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "+", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 68:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "-", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 69:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "*", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 70:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "/", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 71:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "//", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 72:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "%", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 73:
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyS[yypt-2].expr, Operator: "^", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetLine(yyS[yypt-2].expr.Line())
		}
	case 74:
		{
			yyVAL.expr = &ast.UnaryOpExpr{Expr: yyS[yypt-0].expr, Operator: "-"}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 75:
		{
			yyVAL.expr = &ast.UnaryOpExpr{Expr: yyS[yypt-0].expr, Operator: "not "}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 76:
		{
			yyVAL.expr = &ast.UnaryOpExpr{Expr: yyS[yypt-0].expr, Operator: "#"}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 77:
		{
			yyVAL.expr = &ast.UnaryOpExpr{Expr: yyS[yypt-0].expr, Operator: "~"}
			yyVAL.expr.SetLine(yyS[yypt-0].expr.Line())
		}
	case 78:
		{
			yyVAL.expr = &ast.StringExpr{Value: yyS[yypt-0].token.Str}
			yyVAL.expr.SetLine(yyS[yypt-0].token.Pos.Line)
		}
	case 79:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 80:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 81:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 82:
		{
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetLine(yyS[yypt-2].token.Pos.Line)
		}
	case 83:
		{
			yyS[yypt-1].expr.(*ast.FuncCallExpr).AdjustRet = true
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 84:
		{
			yyVAL.expr = &ast.FuncCallExpr{Func: yyS[yypt-1].expr, Args: yyS[yypt-0].exprlist}
			yyVAL.expr.SetLine(yyS[yypt-1].expr.Line())
		}
	case 85:
		{
			yyVAL.expr = &ast.FuncCallExpr{Method: yyS[yypt-1].token.Str, Receiver: yyS[yypt-3].expr, Args: yyS[yypt-0].exprlist}
			yyVAL.expr.SetLine(yyS[yypt-3].expr.Line())
		}
	case 86:
		{
			if yylex.(*Lexer).PNewLine {
				yylex.(*Lexer).TokenError(yyS[yypt-1].token, "ambiguous syntax (function call x new statement)")
			}
			yyVAL.exprlist = []ast.Expr{}
		}
	case 87:
		{
			if yylex.(*Lexer).PNewLine {
				yylex.(*Lexer).TokenError(yyS[yypt-2].token, "ambiguous syntax (function call x new statement)")
			}
			yyVAL.exprlist = yyS[yypt-1].exprlist
		}
	case 88:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 89:
		{
			yyVAL.exprlist = []ast.Expr{yyS[yypt-0].expr}
		}
	case 90:
		{
			yyVAL.expr = &ast.FunctionExpr{ParList: yyS[yypt-0].funcexpr.ParList, Stmts: yyS[yypt-0].funcexpr.Stmts}
			yyVAL.expr.SetLine(yyS[yypt-1].token.Pos.Line)
			yyVAL.expr.SetLastLine(yyS[yypt-0].funcexpr.LastLine())
		}
	case 91:
		{
			yyVAL.funcexpr = &ast.FunctionExpr{ParList: yyS[yypt-3].parlist, Stmts: yyS[yypt-1].stmts}
			yyVAL.funcexpr.SetLine(yyS[yypt-4].token.Pos.Line)
			yyVAL.funcexpr.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 92:
		{
			yyVAL.funcexpr = &ast.FunctionExpr{ParList: &ast.ParList{HasVargs: false, Names: []string{}}, Stmts: yyS[yypt-1].stmts}
			yyVAL.funcexpr.SetLine(yyS[yypt-3].token.Pos.Line)
			yyVAL.funcexpr.SetLastLine(yyS[yypt-0].token.Pos.Line)
		}
	case 93:
		{
			yyVAL.parlist = &ast.ParList{HasVargs: true, Names: []string{}}
		}
	case 94:
		{
			yyVAL.parlist = &ast.ParList{HasVargs: false, Names: []string{}}
			yyVAL.parlist.Names = append(yyVAL.parlist.Names, yyS[yypt-0].namelist...)
		}
	case 95:
		{
			yyVAL.parlist = &ast.ParList{HasVargs: true, Names: []string{}}
			yyVAL.parlist.Names = append(yyVAL.parlist.Names, yyS[yypt-2].namelist...)
		}
	case 96:
		{
			yyVAL.expr = &ast.TableExpr{Fields: []*ast.Field{}}
			yyVAL.expr.SetLine(yyS[yypt-1].token.Pos.Line)
		}
	case 97:
		{
			yyVAL.expr = &ast.TableExpr{Fields: yyS[yypt-1].fieldlist}
			yyVAL.expr.SetLine(yyS[yypt-2].token.Pos.Line)
		}
	case 98:
		{
			yyVAL.fieldlist = []*ast.Field{yyS[yypt-0].field}
		}
	case 99:
		{
			yyVAL.fieldlist = append(yyS[yypt-2].fieldlist, yyS[yypt-0].field)
		}
	case 100:
		{
			yyVAL.fieldlist = yyS[yypt-1].fieldlist
		}
	case 101:
		{
			yyVAL.field = &ast.Field{Key: &ast.StringExpr{Value: yyS[yypt-2].token.Str}, Value: yyS[yypt-0].expr}
			yyVAL.field.Key.SetLine(yyS[yypt-2].token.Pos.Line)
		}
	case 102:
		{
			yyVAL.field = &ast.Field{Key: yyS[yypt-3].expr, Value: yyS[yypt-0].expr}
		}
	case 103:
		{
			yyVAL.field = &ast.Field{Value: yyS[yypt-0].expr}
		}
	case 104:
		{
			yyVAL.fieldsep = ","
		}
	case 105:
		{
			yyVAL.fieldsep = ";"
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

func TokenName(c int) string {
	if c >= TAnd && c-TAnd < len(yySymNames) {
		if yySymNames[c-TAnd] != "" {
			return yySymNames[c-TAnd]
		}
	}
	return string([]byte{byte(c)})
}
